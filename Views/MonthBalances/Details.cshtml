@using RLBW_ERP.Models.FinanceModels;
@model RLBW_ERP.Models.ViewModels.MonthBalanceDetailsViewModel

@{
    int year = Model.Year;
    int month = Model.Month;
    var previousMonth = month == 1 ? 12 : month - 1;
    var previousYear = month == 1 ? year - 1 : year;
    var nextMonth = month == 12 ? 1 : month + 1;
    var nextYear = month == 12 ? year + 1 : year;

    string isExpense = (string)ViewData["isExpense"];
    string isIncurred = (string)ViewData["isIncurred"];
    var category = ViewData["Id"];
    var subcategory = ViewData["SubcategoryId"];
    var type = ViewData["TypeId"];
    var paymentAccount = ViewData["PaymentAccountId"];
    var dateStart = ViewData["DateStart"];
    var dateEnd = ViewData["DateEnd"];
    var currentFilter = ViewData["CurrentFilter"];
    var currentSort = ViewData["CurrentSort"];

    bool first = month == 9 && year == 2016;
    bool last = month == ViewBag.LastMonth && year == ViewBag.LastYear;
    ViewData["Title"] = "Balanço " + month.ToString("00") + "/" + year;
    decimal totalBalance = 0m;
}

<div>
    <h4>Balanço @Model.Month/@Model.Year</h4>
    @if (!first)
    {
        <a class="btn btn-sm btn-outline-secondary" asp-action="Details" asp-route-year="@previousYear" asp-route-month="@previousMonth">@previousMonth/@previousYear</a>
    }
    @if (!last)
    {
        <a class="btn btn-sm btn-outline-secondary" asp-action="Details" asp-route-year="@nextYear" asp-route-month="@nextMonth">@nextMonth/@nextYear</a>
    }
    <a class="btn btn-sm btn-outline-secondary" asp-action="UpdateAllBalances" asp-route-year="@year" asp-route-month="@month">Atualizar</a>
    <a class="btn btn-sm btn-outline-secondary" asp-controller="Transactions" asp-action="Create">Nova Transação</a>
    <a class="btn btn-sm btn-outline-secondary" asp-controller="MonthBalances" asp-action="Index">Todos</a>
    <hr />
    <div class="row">
        <dl class="col-3">
            <div class="row">
                <dt class="col">
                    @Html.DisplayNameFor(model => model.PreviousBalance)
                </dt>
                <dd class="col">
                    @string.Format(System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"), "{0:N2}", Model.PreviousBalance)
                </dd>
            </div>
            <div class="row">
                <dt class="col">
                    @Html.DisplayNameFor(model => model.TotalIncomeIncurred)
                </dt>
                <dd class="col">
                    @string.Format(System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"), "{0:N2}", Model.TotalIncomeIncurred)
                </dd>
            </div>
            <div class="row">
                <dt class="col">
                    @Html.DisplayNameFor(model => model.TotalExpenseIncurred)
                </dt>
                <dd class="col">
                    @string.Format(System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"), "{0:N2}", Model.TotalExpenseIncurred)
                </dd>
            </div>
            <div class="row">
                <dt class="col">
                    @Html.DisplayNameFor(model => model.ResultIncurred)
                </dt>
                <dd class="col">
                    @string.Format(System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"), "{0:N2}", Model.ResultIncurred)
                </dd>
            </div>
            <div class="row">
                <dt class="col">
                    @Html.DisplayNameFor(model => model.AccumulatedBalanceIncurred)
                </dt>
                <dd class="col">
                    @string.Format(System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"), "{0:N2}", Model.AccumulatedBalanceIncurred)
                </dd>
            </div>
            <div class="row">
                <dt class="col">
                    @Html.DisplayNameFor(model => model.TotalIncomeForecast)
                </dt>
                <dd class="col">
                    @string.Format(System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"), "{0:N2}", Model.TotalIncomeForecast)
                </dd>
            </div>
            <div class="row">
                <dt class="col">
                    @Html.DisplayNameFor(model => model.TotalExpenseForecast)
                </dt>
                <dd class="col">
                    @string.Format(System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"), "{0:N2}", Model.TotalExpenseForecast)
                </dd>
            </div>
            <div class="row">
                <dt class="col">
                    @Html.DisplayNameFor(model => model.ResultForecast)
                </dt>
                <dd class="col">
                    @string.Format(System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"), "{0:N2}", Model.ResultForecast)
                </dd>
            </div>
            <div class="row">
                <dt class="col">
                    @Html.DisplayNameFor(model => model.AccumulatedBalanceForecast)
                </dt>
                <dd class="col">
                    @string.Format(System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"), "{0:N2}", Model.AccumulatedBalanceForecast)
                </dd>
            </div>
        </dl>
        <div class="col-4">
            <canvas id="myChart" class="chart" style="width:200px; height:200px"></canvas>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <script src="~/js/monthBalanceDetails.js"></script>
            <script type="text/javascript">
                var url = "/MonthBalances/GetDetailsChartInfo?year=" + @year + "&month=" + @month;
                $(function () {
                    $(document).ready(function () {
                        GetDetailsChartData(url);
                    })
                })
            </script>
        </div>
        <div class="col-4">
            <h5>Saldo das Contas (em @ViewBag.LastIncurredMonth)</h5>
            @foreach (var a in Model.Accounts.Where(x => !x.Name.Contains("Rodrigo") && !x.Name.Contains("Alisson") && !x.Name.Contains("Ricardo")).OrderBy(x => x.Name))
            {
                var balance = a.CalcBalance(year, month);
                totalBalance += balance;
                if (balance != 0)
                {
                    <div>
                        <dl class="row">
                            <dt class="col-3 align-content-end">
                                @Html.DisplayFor(model => a.Name)
                            </dt>
                            <dd class="col">
                                @string.Format(System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"), "{0:N2}", a.CalcBalance(year, month))
                            </dd>
                        </dl>
                    </div>
                }
            }
            <hr />
            <div class="row">
                <dl class="row">
                    <dt class="col">
                        @Html.Raw("Total")
                    </dt>
                    <dd class="col">
                        @string.Format(System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"), "{0:N2}", totalBalance)
                    </dd>
                </dl>
            </div>

        </div>
    </div>
</div>
<hr id="transactions-table" />
<h4>Transações</h4>
<div class="form-actions no-color ">
    <form asp-controller="MonthBalances" asp-action="FilteredDetails" method="post">
        <a data-bs-toggle="tooltip" data-bs-placement="top" title="A pesquisa ocorre somente para Descrição, Documento e Observações">
            Pesquisa: <input type="text" class="filterFields" name="SearchString" value="@currentFilter" id="searchString" />
            <input type="submit"
                   asp-route-year="@year"
                   asp-route-month="@month"
                   asp-route-sortOrder="@currentSort"
                   asp-route-currentFilter="@currentFilter"
                   asp-route-isExpense="@isExpense"
                   asp-route-isIncurred="@isIncurred "
                   asp-route-category="@category"
                   asp-route-subcategory="@subcategory"
                   asp-route-type="@type"
                   asp-route-paymentAccount="@paymentAccount"
                   asp-route-dateStart="@dateStart"
                   asp-route-dateEnd="@dateEnd"
                   value="Pesquisar" class="btn btn-sm btn-outline-secondary" />
        </a>
    </form>
</div>
<div>
    <div class="row justify-content-center">
        <div class="col-1">
            <span class="input-group-text">Natureza</span>
            <select class="form-control filterFields" id="isExpense">
                <option selected value=0>Todos</option>
                <option value="true">Despesas</option>
                <option value="false">Receitas</option>
            </select>
        </div>
        <div class="col-2">
            <span class="input-group-text">Previsto/Realizado</span>
            <select class="form-control filterFields" id="isIncurred">
                <option selected value=0>Todos</option>
                <option value="true">Realizado</option>
                <option value="false">Previsto</option>
            </select>
        </div>
        <div class="col-1">
            <span class="input-group-text">Categoria</span>
            <select class="form-control filterFields" id="category" asp-items="@(new SelectList(ViewBag.Categories, "Value", "Text", category))">
                <option selected value=0>Todas</option>
            </select>
        </div>
        <div class="col-1">
            <span class="input-group-text">Subcategoria</span>
            <select class="form-control filterFields" id="subcategory" asp-items="@(new SelectList(ViewBag.Subcategories, "Value", "Text", subcategory))">
                <option selected value=0>Todas</option>
            </select>
        </div>
        <div class="col-1">
            <span class="input-group-text">Tipo</span>
            <select class="form-control filterFields" id="type" asp-items="@(new SelectList(ViewBag.Types, "Value", "Text", type))">
                <option selected value=0>Todos</option>
            </select>
        </div>
        <div class="col-1">
            <span class="input-group-text">Conta</span>
            <select class="form-control filterFields" id="paymentAccount" asp-items="@(new SelectList(ViewBag.PaymentAccounts, "Value", "Text", paymentAccount))">
                <option selected value=0>Todos</option>
            </select>
        </div>
        <div class="col-2">
            <span class="input-group-text">De</span>
            <input class="form-control filterFields" type="date" id="dateStart" />
        </div>
        <div class="col-2">
            <span class="input-group-text">Até</span>
            <input class="form-control filterFields" type="date" id="dateEnd" />
        </div>
        <div class="col-md-1">
            <a class="btn btn-sm btn-outline-secondary" id="clearFilter">Limpar</a>
            <a asp-action="ExportToExcel" asp-route-year="@year" asp-route-month="@month" class="btn btn-sm btn-outline-secondary" id="exportToExcel">Exportar</a>
        </div>

    </div>

</div>
<div class="container-fluid" id="transactions-container">
    @await Html.PartialAsync("_MonthBalancePartialView", Model.Transactions)
</div>
@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            RestoreTransactionsFilterFromStorage();
            TransactionsFilter(@year, @month);
        });
        $(document).on('change', '.filterFields', function () {
            var isExpense = $("#isExpense").val();
            var isIncurred = $('#isIncurred').val();
            var dateStart = $('#dateStart').val();
            var dateEnd = $('#dateEnd').val();
            var category = $('#category').val();
            var subcategory = $('#subcategory').val();
            var type = $('#type').val();
            var paymentAccount = $('#paymentAccount').val();
            var searchString = $('#searchString').val();
            var sortOrder = sessionStorage.sortOrder;
            var currentFilter = $('#searchString').val();
            console.log('filterFields change', $(this).attr("Id"), $(this).val());
            SaveTransactionsFilterParams(isExpense, isIncurred, category, subcategory, type, paymentAccount, dateStart, dateEnd, searchString, currentFilter, sortOrder);
            TransactionsFilter(@year, @month);
        });
        $(document).ready(function () {
            $(document).on('input', '#searchString', function () {
                var debounceTimer;
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(function () {
                    var isExpense = $("#isExpense").val();
                    var isIncurred = $('#isIncurred').val();
                    var dateStart = $('#dateStart').val();
                    var dateEnd = $('#dateEnd').val();
                    var category = $('#category').val();
                    var subcategory = $('#subcategory').val();
                    var type = $('#type').val();
                    var paymentAccount = $('#paymentAccount').val();
                    var searchString = $('#searchString').val();
                    var sortOrder = sessionStorage.sortOrder;
                    var currentFilter = $('#searchString').val();
                    console.log('searchString input', $('#searchString').val());
                    SaveTransactionsFilterParams(isExpense, isIncurred, category, subcategory, type, paymentAccount, dateStart, dateEnd, searchString, currentFilter, sortOrder);
                    TransactionsFilter(@year, @month);
                }, 300);
            });
        })
        $(document).on('click', '#clearFilter', function () {
            $("#isExpense").val(0);
            $('#isIncurred').val(0);
            $('#dateStart').val("");
            $('#dateEnd').val("");
            $('#category').val(0);
            $('#subcategory').val(0);
            $('#type').val(0);
            $('#paymentAccount').val(0);
            $('#searchString').val("");

            var isExpense = $("#isExpense").val();
            var isIncurred = $('#isIncurred').val();
            var dateStart = $('#dateStart').val();
            var dateEnd = $('#dateEnd').val();
            var category = $('#category').val();
            var subcategory = $('#subcategory').val();
            var type = $('#type').val();
            var paymentAccount = $('#paymentAccount').val();
            var searchString = $('#searchString').val();
            var sortOrder = "Date";
            var currentFilter = $('#searchString').val();

            SaveTransactionsFilterParams(isExpense, isIncurred, category, subcategory, type, paymentAccount, dateStart, dateEnd, searchString, currentFilter, sortOrder);
            TransactionsFilter(@year, @month);
        })
        $(document).on('click', '.sortField', function () {
            var isExpense = $("#isExpense").val();
            var isIncurred = $('#isIncurred').val();
            var dateStart = $('#dateStart').val();
            var dateEnd = $('#dateEnd').val();
            var category = $('#category').val();
            var subcategory = $('#subcategory').val();
            var type = $('#type').val();
            var paymentAccount = $('#paymentAccount').val();
            var searchString = $('#searchString').val();
            var sortOrder = $(this).attr('data-sort');
            var currentFilter = $('#searchString').val();

            SaveTransactionsFilterParams(isExpense, isIncurred, category, subcategory, type, paymentAccount, dateStart, dateEnd, searchString, currentFilter, sortOrder);
            TransactionsFilter(@year, @month);
        });
        $(document).on('change', '#category', function () {
            var url = '@ViewBag.Url/' + 'Transactions/';
            var categoryId = $(this).val();
            var subcategoryElementId = "subcategory";

            GetSubcategoriesList(url, categoryId, subcategoryElementId);
        });
        $(document).on('change', '#subcategory', function () {
            var url = '@ViewBag.Url/' + 'Transactions/';
            var subcategoryId = $(this).val();
            var typeElementId = "#type";

            GetTypesList(url, subcategoryId, typeElementId);
        });

    </script>
}
