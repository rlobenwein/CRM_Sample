@model RLBW_ERP.Models.FinanceModels.Budget

@{
    ViewBag.Title = "Editar Orçamento";
}

<h4>Editar Orçamento</h4>
<div class="row">
    <div class="col-md-4">

        @using (Html.BeginForm("Edit", "Budgets", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <div class="form-group">
                @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Frequency, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Frequency, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Frequency, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <label for="category" class="control-label">Categoria</label>
                <select name="category" id="category" class="form-control" asp-items="@(new SelectList(ViewBag.CategoryId, "Value", "Text",Model.TransactionType.Subcategory.CategoryId))"></select>
            </div>
            <div class="form-group">
                <label for="subcategory" class="control-label">Subcategoria</label>
                <select name="subcategory" id="subcategory" class="form-control" asp-items="@(new SelectList(ViewBag.SubcategoryId, "Value", "Text",Model.TransactionType.SubcategoryId))"></select>
            </div>
            <div class="form-group">
                <label asp-for="TransactionTypeId" class="control-label">Tipo da transação</label>
                <select asp-for="TransactionTypeId" id="type" class="form-control" asp-items="@(new SelectList(ViewBag.TypeId, "Value", "Text",Model.TransactionTypeId))"></select>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TotalBudgeted, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.TotalBudgeted, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotalBudgeted, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.TransactionDay, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.TransactionDay, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TransactionDay, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.InitialMonth, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.InitialMonth, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.InitialMonth, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                <input type="submit" value="Salvar" class="btn btn-primary" />
            </div>
        }
    </div>
</div>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $.validator.methods.number = function (value, element) {
            return this.optional(element) || /^[0-9]+(,[0-9]+)?$/.test(value);
        };
        $(document).on('change', '#isExpense', function () {
            var url = '@ViewBag.Url/' + 'Transactions/GetCategoriesList';
            var isExpense = $(this).prop("checked");
            var selectItem = "<option value=0>Selecione</option>";
            $('#category').empty();
            $('#category').html(selectItem);
            $('#subcategory').empty();
            $('#subcategory').html(selectItem);
            $('#type').empty();
            $('#type').html(selectItem);

            $.getJSON(url, { isExpense: isExpense }, function (data) {
                var items = "<option value=0>Selecione</option>";
                $('#category').empty();
                $.each(data, function (i, category) {
                    items += "<option value='" + category.value + "'>" + category.text + "</option>";
                });
                $('#category').html(items);
            });
        });
        $(document).on('change', '#category', function () {
            var url = '@ViewBag.Url/' + 'Transactions/GetSubcategoriesList';
            var categoryId = $(this).val();

            $.getJSON(url, { categoryId: categoryId }, function (data) {
                var items = "<option value=0>Selecione</option>";
                $('#subcategory').empty();
                $.each(data, function (i, subcategory) {
                    items += "<option value='" + subcategory.value + "'>" + subcategory.text + "</option>";
                });
                $('#subcategory').html(items);
            });
        });
        $(document).on('change', '#subcategory', function () {
            var url = '@ViewBag.Url/' + 'Transactions/GetTypesList';
            var subcategoryId = $(this).val();

            $.getJSON(url, { subcategoryId: subcategoryId }, function (data) {
                var items = "<option value=0>Selecione</option>";
                $('#type').empty();
                $.each(data, function (i, type) {
                    items += "<option value='" + type.value + "'>" + type.text + "</option>";
                });
                $('#type').html(items);
            });
        });
    </script>
}