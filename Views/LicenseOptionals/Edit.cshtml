@using RLBW_ERP.Common
@model RLBW_ERP.Models.SalesModels.LicenseOptional

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>LicenseOptional</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="LicenseOptionalId" />
            <div class="form-group">
                <label asp-for="OptionalName" class="control-label"></label>
                <input asp-for="OptionalName" class="form-control" />
                <span asp-validation-for="OptionalName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="SubProductId" class="control-label"></label>
                <select asp-for="SubProductId" class="form-control" asp-items="ViewBag.SubProductId"></select>
                <span asp-validation-for="SubProductId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="control-label"></label>
                <input asp-for="Price" class="form-control" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" ></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a class="btn btn-sm btn-outline-secondary" asp-action="Index">Voltar para a lista</a>
</div>
<script>
    $.validator.methods.range = function (value, element, param) {
        var globalizedValue = value.replace(",", ".");
        return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
    }

    $.validator.methods.number = function (value, element) {
        return this.optional(element) || /-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
    }
    //Date dd/MM/yyyy
    $.validator.methods.date = function (value, element) {
        var date = value.split("/");
        return this.optional(element) || !/Invalid|NaN/.test(new Date(date[2], date[1], date[0]).toString());
    }

</script>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    }
