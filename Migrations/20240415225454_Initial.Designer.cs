// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RLBW_ERP.Data;

#nullable disable

namespace CRM.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240415225454_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.CRMModels.ActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ActionTypes", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.CRMModels.ErpUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ErpUsers", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressComplement")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AddressDistrict")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CompanyPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FinanceEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MainAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TaxpayerNumber")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.HasIndex("TaxpayerNumber")
                        .IsUnique();

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.CompanyBusiness", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId", "FieldId");

                    b.HasIndex("FieldId");

                    b.ToTable("Businesses", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.CompanyEmployee", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Department")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("InitialDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Position")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("WorkEmail")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CompanyId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Fields", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressComplement")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AddressDistrict")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CellPhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LinkedinProfile")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("MainAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TaxpayerNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("TaxpayerNumber")
                        .IsUnique();

                    b.ToTable("People", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Software", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.SoftwareCompany", b =>
                {
                    b.Property<int>("SoftwareId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Features")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LicenseExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("SoftwareId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("SoftwareCompany", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int?>("InitialMonth")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalBudgeted")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("TransactionDay")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Budgets", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("OpportunityId");

                    b.ToTable("CostsCenters", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.PaymentAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("PaymentAccounts", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.PaymentTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTerms", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Contract")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DeliveryTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("DirectInvoicing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<decimal>("ExchangeRate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasDefaultValue(1m);

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<string>("PONumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("POStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTermId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PoFile")
                        .HasColumnType("longblob");

                    b.Property<int?>("ProposalId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("ValueBRL")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("ProposalId");

                    b.ToTable("PurchaseOrders", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BankTransactionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("BudgetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Document")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsExpense")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsIncurred")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("PaymentAccountId")
                        .HasColumnType("int");

                    b.Property<string>("StatementLine")
                        .HasColumnType("longtext");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("BankTransactionId")
                        .IsUnique();

                    b.HasIndex("BudgetId");

                    b.HasIndex("PaymentAccountId");

                    b.HasIndex("TypeId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.TransactionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsExpense")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("TransactionCategories", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.TransactionDistribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<decimal>("Proportion")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(1m);

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionDistributions", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.TransactionSubcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("TransactionSubcategories", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("TransactionTypes", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.LocationModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.LocationModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Iso3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.LocationModels.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.CommercialLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CommercialLicenses", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.LicenseNetworkType", b =>
                {
                    b.Property<int>("LicenseNetworkTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NetworkType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("LicenseNetworkTypeId");

                    b.ToTable("LicenseNetworkTypes", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.LicenseOptional", b =>
                {
                    b.Property<int>("LicenseOptionalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("OptionalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("SubProductId")
                        .HasColumnType("int");

                    b.HasKey("LicenseOptionalId");

                    b.HasIndex("OptionalName")
                        .IsUnique();

                    b.HasIndex("SubProductId");

                    b.ToTable("LicenseOptional", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.LicenseTime", b =>
                {
                    b.Property<int>("LicenseTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("LicenseTimeId");

                    b.ToTable("LicenseTimes", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.Opportunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ErpUserId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("OpportunityGroup")
                        .HasColumnType("int");

                    b.Property<int?>("PipelineId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Value")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ErpUserId");

                    b.HasIndex("PipelineId");

                    b.HasIndex("ProductId");

                    b.ToTable("Opportunities", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.OpportunityAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)");

                    b.Property<int>("ErpUserId")
                        .HasColumnType("int");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PipelineId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("ErpUserId");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PipelineId");

                    b.ToTable("OpportunityActions", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.OptionalsPackage", b =>
                {
                    b.Property<int>("SubproductsListId")
                        .HasColumnType("int");

                    b.Property<int>("OptionalId")
                        .HasColumnType("int");

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("Discount")
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("SubproductsListId", "OptionalId");

                    b.HasIndex("OptionalId");

                    b.ToTable("OptionalsPackages", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.Pipeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Stage")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Pipelines", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DelireryTime")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)");

                    b.Property<decimal>("ExchangeRate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(15, 4)
                        .HasColumnType("decimal(15,4)")
                        .HasDefaultValue(1m);

                    b.Property<int>("ExpirationTime")
                        .HasColumnType("int");

                    b.Property<bool>("ManualPrice")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("OpportunityId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("PriceBrl")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("Revision")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpportunityId");

                    b.ToTable("Proposals", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.ProposalProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)");

                    b.Property<bool>("ManualPrice")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProposalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProposalId");

                    b.ToTable("ProposalProducts", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.SoftwareParams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Coefficient")
                        .HasPrecision(9, 4)
                        .HasColumnType("decimal(9,4)");

                    b.Property<int?>("CommercialLicenseId")
                        .HasColumnType("int");

                    b.Property<int?>("Cores")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseNetworkId")
                        .HasColumnType("int");

                    b.Property<int?>("LicenseTimeId")
                        .HasColumnType("int");

                    b.Property<int?>("Seats")
                        .HasColumnType("int");

                    b.Property<int>("SubproductsListId")
                        .HasColumnType("int");

                    b.Property<int?>("Tasks")
                        .HasColumnType("int");

                    b.Property<decimal?>("TimeQuantity")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("Workbenchs")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommercialLicenseId");

                    b.HasIndex("LicenseNetworkId");

                    b.HasIndex("LicenseTimeId");

                    b.HasIndex("SubproductsListId")
                        .IsUnique();

                    b.ToTable("SoftwareParams", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.SubProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Subproducts", (string)null);
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.SubproductsList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("Discount")
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("ProposalProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("SubproductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubproductId");

                    b.ToTable("SubproductsLists", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.Company", b =>
                {
                    b.HasOne("RLBW_ERP.Models.LocationModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.CompanyBusiness", b =>
                {
                    b.HasOne("RLBW_ERP.Models.CustomerModels.Company", "Company")
                        .WithMany("Businesses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.CustomerModels.Field", "Field")
                        .WithMany("CompanyBusinesses")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.CompanyEmployee", b =>
                {
                    b.HasOne("RLBW_ERP.Models.CustomerModels.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.CustomerModels.Person", "Person")
                        .WithMany("CompanyEmployees")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.Person", b =>
                {
                    b.HasOne("RLBW_ERP.Models.LocationModels.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.SoftwareCompany", b =>
                {
                    b.HasOne("RLBW_ERP.Models.CustomerModels.Company", "Company")
                        .WithMany("SoftwareCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.CustomerModels.Software", "Software")
                        .WithMany("SoftwareCompanies")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.Budget", b =>
                {
                    b.HasOne("RLBW_ERP.Models.FinanceModels.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.CostCenter", b =>
                {
                    b.HasOne("RLBW_ERP.Models.SalesModels.Opportunity", "Opportunity")
                        .WithMany("CostCenters")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.PurchaseOrder", b =>
                {
                    b.HasOne("RLBW_ERP.Models.SalesModels.Opportunity", "Opportunity")
                        .WithMany()
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.FinanceModels.PaymentTerm", "PaymentTerms")
                        .WithMany()
                        .HasForeignKey("PaymentTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.SalesModels.Proposal", "Proposal")
                        .WithMany()
                        .HasForeignKey("ProposalId");

                    b.Navigation("Opportunity");

                    b.Navigation("PaymentTerms");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.Transaction", b =>
                {
                    b.HasOne("RLBW_ERP.Models.FinanceModels.Budget", "Budget")
                        .WithMany("Transactions")
                        .HasForeignKey("BudgetId");

                    b.HasOne("RLBW_ERP.Models.FinanceModels.PaymentAccount", "PaymentAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.FinanceModels.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("PaymentAccount");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.TransactionDistribution", b =>
                {
                    b.HasOne("RLBW_ERP.Models.FinanceModels.CostCenter", "CostCenter")
                        .WithMany("TransactionsDistribution")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.FinanceModels.Transaction", "Transaction")
                        .WithMany("Distributions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.TransactionSubcategory", b =>
                {
                    b.HasOne("RLBW_ERP.Models.FinanceModels.TransactionCategory", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.TransactionType", b =>
                {
                    b.HasOne("RLBW_ERP.Models.FinanceModels.TransactionSubcategory", "Subcategory")
                        .WithMany("TransactionType")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("RLBW_ERP.Models.LocationModels.City", b =>
                {
                    b.HasOne("RLBW_ERP.Models.LocationModels.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("RLBW_ERP.Models.LocationModels.State", b =>
                {
                    b.HasOne("RLBW_ERP.Models.LocationModels.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.LicenseOptional", b =>
                {
                    b.HasOne("RLBW_ERP.Models.SalesModels.SubProduct", "SubProduct")
                        .WithMany()
                        .HasForeignKey("SubProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubProduct");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.Opportunity", b =>
                {
                    b.HasOne("RLBW_ERP.Models.CustomerModels.Company", "Company")
                        .WithMany("Opportunities")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.CRMModels.ErpUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ErpUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.SalesModels.Pipeline", "Pipeline")
                        .WithMany()
                        .HasForeignKey("PipelineId");

                    b.HasOne("RLBW_ERP.Models.SalesModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Company");

                    b.Navigation("Manager");

                    b.Navigation("Pipeline");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.OpportunityAction", b =>
                {
                    b.HasOne("RLBW_ERP.Models.CRMModels.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.CRMModels.ErpUser", "ErpUser")
                        .WithMany("OpportunityActions")
                        .HasForeignKey("ErpUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.SalesModels.Opportunity", "Opportunity")
                        .WithMany("OpportunityActions")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.CustomerModels.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("RLBW_ERP.Models.SalesModels.Pipeline", "Pipeline")
                        .WithMany()
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionType");

                    b.Navigation("ErpUser");

                    b.Navigation("Opportunity");

                    b.Navigation("Person");

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.OptionalsPackage", b =>
                {
                    b.HasOne("RLBW_ERP.Models.SalesModels.LicenseOptional", "LicenseOptional")
                        .WithMany()
                        .HasForeignKey("OptionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.SalesModels.SubproductsList", "SubproductsList")
                        .WithMany("Optionals")
                        .HasForeignKey("SubproductsListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LicenseOptional");

                    b.Navigation("SubproductsList");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.Product", b =>
                {
                    b.HasOne("RLBW_ERP.Models.SalesModels.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.Proposal", b =>
                {
                    b.HasOne("RLBW_ERP.Models.SalesModels.Opportunity", "Opportunity")
                        .WithMany("Proposals")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.ProposalProduct", b =>
                {
                    b.HasOne("RLBW_ERP.Models.SalesModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.SalesModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.SalesModels.Proposal", "Proposal")
                        .WithMany("Products")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.SoftwareParams", b =>
                {
                    b.HasOne("RLBW_ERP.Models.SalesModels.CommercialLicense", "CommercialLicense")
                        .WithMany()
                        .HasForeignKey("CommercialLicenseId");

                    b.HasOne("RLBW_ERP.Models.SalesModels.LicenseNetworkType", "LicenseNetworkType")
                        .WithMany()
                        .HasForeignKey("LicenseNetworkId");

                    b.HasOne("RLBW_ERP.Models.SalesModels.LicenseTime", "LicenseTime")
                        .WithMany()
                        .HasForeignKey("LicenseTimeId");

                    b.HasOne("RLBW_ERP.Models.SalesModels.SubproductsList", "SubproductsList")
                        .WithMany("Params")
                        .HasForeignKey("SubproductsListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommercialLicense");

                    b.Navigation("LicenseNetworkType");

                    b.Navigation("LicenseTime");

                    b.Navigation("SubproductsList");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.SubProduct", b =>
                {
                    b.HasOne("RLBW_ERP.Models.SalesModels.Product", "Product")
                        .WithMany("Subproducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.SubproductsList", b =>
                {
                    b.HasOne("RLBW_ERP.Models.SalesModels.ProposalProduct", "ProposalProduct")
                        .WithMany("Subproducts")
                        .HasForeignKey("SubproductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RLBW_ERP.Models.SalesModels.SubProduct", "SubProduct")
                        .WithMany()
                        .HasForeignKey("SubproductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProposalProduct");

                    b.Navigation("SubProduct");
                });

            modelBuilder.Entity("RLBW_ERP.Models.CRMModels.ErpUser", b =>
                {
                    b.Navigation("OpportunityActions");
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.Company", b =>
                {
                    b.Navigation("Businesses");

                    b.Navigation("Employees");

                    b.Navigation("Opportunities");

                    b.Navigation("SoftwareCompanies");
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.Field", b =>
                {
                    b.Navigation("CompanyBusinesses");
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.Person", b =>
                {
                    b.Navigation("CompanyEmployees");
                });

            modelBuilder.Entity("RLBW_ERP.Models.CustomerModels.Software", b =>
                {
                    b.Navigation("SoftwareCompanies");
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.Budget", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.CostCenter", b =>
                {
                    b.Navigation("TransactionsDistribution");
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.PaymentAccount", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.Transaction", b =>
                {
                    b.Navigation("Distributions");
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.TransactionCategory", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("RLBW_ERP.Models.FinanceModels.TransactionSubcategory", b =>
                {
                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("RLBW_ERP.Models.LocationModels.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("RLBW_ERP.Models.LocationModels.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.Opportunity", b =>
                {
                    b.Navigation("CostCenters");

                    b.Navigation("OpportunityActions");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.Product", b =>
                {
                    b.Navigation("Subproducts");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.Proposal", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.ProposalProduct", b =>
                {
                    b.Navigation("Subproducts");
                });

            modelBuilder.Entity("RLBW_ERP.Models.SalesModels.SubproductsList", b =>
                {
                    b.Navigation("Optionals");

                    b.Navigation("Params");
                });
#pragma warning restore 612, 618
        }
    }
}
